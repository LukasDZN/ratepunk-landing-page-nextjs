@use '../abstracts/colors.module.scss' as c;
@use '../abstracts/borders.module.scss' as b;

.defaultButton {
  & {
    font-size: 0.8rem;
    padding: 0.2rem 0.6rem;
  }
  &:hover {
    cursor: pointer;
  }
  &:disabled {
    cursor: default;
    background-color: c.$gray !important;
  }
}
.actionButton {
  & {
    @extend .defaultButton;
    background-color: #4eb3e3;
    color: #ffffff;
    line-height: 2rem;
    font-size: 1.25rem;
    text-align: center;
    font-weight: bold;
    height: 4rem;
  }
  &:hover {
    background-color: c.$green;
  }
  &:active {
    background-color: lighten(c.$green, 15%);
  }
}

.submitButton {
  @extend .actionButton;
  margin: 0.5rem 0;
  width: 100%;
  border-radius: b.$border-radius;
  border: b.$border;
}

.copyDesktopButton {
  @extend .actionButton;
  border: b.$border;
  @media only screen and (min-width: 701px) {
    width: 25%;
    border-radius: 0 10px 10px 0;
    border-left: none;
  }
  @media only screen and (max-width: 700px) {
    display: none;
  }
}

.copyMobileButton {
  @extend .actionButton;
  border: b.$border;
  @media only screen and (max-width: 700px) {
    width: 100%;
    border-radius: 10px;
  }
  @media only screen and (min-width: 701px) {
    display: none;
  }
}

.hideElement {
  visibility: hidden;
  opacity: 0;
}

.doNotRenderElement {
  display: none;
}

.buttonSpinner::after {
  content: '';
  position: absolute;
  width: 1.2rem;
  height: 1.2rem;
  top: 0;
  left: 0;
  right: 0;
  margin: auto;
  border: 4px solid transparent;
  border-top-color: #4eb3e3;
  border-radius: 50%;
  animation: buttonLoadingSpinner 1s ease infinite;
  @media only screen and (max-width: 480px) {
    bottom: 1%;
  }
  @media only screen and (min-width: 481px) and (max-width: 1000px) {
    bottom: 4%;
  }
  @media only screen and (min-width: 1001px) and (max-width: 1400px) {
    bottom: 16%;
  }
  @media only screen and (min-width: 1401px) {
    bottom: 20%;
  }
}

@keyframes buttonLoadingSpinner {
  from {
    transform: rotate(0turn);
  }
  to {
    transform: rotate(1turn);
  }
}
